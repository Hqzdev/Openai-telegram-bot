import asyncio
from typing import Dict, Any, Optional
from aiogram import Router, F
from aiogram.types import (
    Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton,
    WebAppInfo, PreCheckoutQuery, SuccessfulPayment
)
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
from app.config import settings
from app.database.models import User, Dialog, Message as DBMessage
from app.database.connection import get_db
from app.services.openai_service import openai_service
from app.services.billing_service import billing_service
from app.services.payment_service import payment_service
import structlog

logger = structlog.get_logger(__name__)
router = Router()


class ChatStates(StatesGroup):
    waiting_for_message = State()


def get_main_keyboard() -> InlineKeyboardMarkup:
    """Main menu keyboard"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="üí¨ –û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç",
                web_app=WebAppInfo(url=f"{settings.app_base_url}/chat")
            ),
            InlineKeyboardButton(
                text="üìä –ú–æ–∏ –ª–∏–º–∏—Ç—ã",
                callback_data="limits"
            )
        ],
        [
            InlineKeyboardButton(
                text="üíé –¢–∞—Ä–∏—Ñ—ã",
                callback_data="plans"
            ),
            InlineKeyboardButton(
                text="üÜï –ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥",
                callback_data="new_dialog"
            )
        ],
        [
            InlineKeyboardButton(
                text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
                web_app=WebAppInfo(url=f"{settings.app_base_url}/settings")
            ),
            InlineKeyboardButton(
                text="üìö –ò—Å—Ç–æ—Ä–∏—è",
                web_app=WebAppInfo(url=f"{settings.app_base_url}/history")
            )
        ]
    ])


def get_plans_keyboard() -> InlineKeyboardMarkup:
    """Plans selection keyboard"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="‚≠ê Start (300 –∑–∞–ø—Ä–æ—Å–æ–≤/–º–µ—Å)",
                callback_data="plan_start"
            )
        ],
        [
            InlineKeyboardButton(
                text="üöÄ Pro (1500 –∑–∞–ø—Ä–æ—Å–æ–≤/–º–µ—Å)",
                callback_data="plan_pro"
            )
        ],
        [
            InlineKeyboardButton(
                text="üíº Business (–±–µ–∑–ª–∏–º–∏—Ç)",
                callback_data="plan_business"
            )
        ],
        [
            InlineKeyboardButton(
                text="üì¶ –ü–∞–∫–µ—Ç 100 –∑–∞–ø—Ä–æ—Å–æ–≤",
                callback_data="pack_100"
            ),
            InlineKeyboardButton(
                text="üì¶ –ü–∞–∫–µ—Ç 500 –∑–∞–ø—Ä–æ—Å–æ–≤",
                callback_data="pack_500"
            )
        ],
        [
            InlineKeyboardButton(
                text="üîô –ù–∞–∑–∞–¥",
                callback_data="back_to_main"
            )
        ]
    ])


def get_payment_keyboard(plan_name: str, amount_stars: int, amount_rub: float) -> InlineKeyboardMarkup:
    """Payment options keyboard"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text=f"‚≠ê –û–ø–ª–∞—Ç–∏—Ç—å {amount_stars} –∑–≤–µ–∑–¥–∞–º–∏",
                callback_data=f"pay_stars_{plan_name}"
            )
        ],
        [
            InlineKeyboardButton(
                text=f"üí≥ –û–ø–ª–∞—Ç–∏—Ç—å {amount_rub}‚ÇΩ",
                callback_data=f"pay_yoomoney_{plan_name}"
            )
        ],
        [
            InlineKeyboardButton(
                text="üîô –ù–∞–∑–∞–¥ –∫ —Ç–∞—Ä–∏—Ñ–∞–º",
                callback_data="plans"
            )
        ]
    ])


@router.message(Command("start"))
async def cmd_start(message: Message, session: AsyncSession):
    """Handle /start command"""
    user_id = message.from_user.id
    
    # Check if user exists
    user = await session.execute(
        select(User).where(User.id == user_id)
    )
    user = user.scalar_one_or_none()
    
    if not user:
        # Create new user
        user = User(
            id=user_id,
            trial_left=settings.trial_requests,
            lang=message.from_user.language_code or "ru"
        )
        session.add(user)
        await session.commit()
        
        welcome_text = f"""
üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞!

–£ –≤–∞—Å –µ—Å—Ç—å {settings.trial_requests} –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.

ü§ñ –ß—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç:
‚Ä¢ –î–∏–∞–ª–æ–≥–∏ —Å ChatGPT
‚Ä¢ –°—Ç—Ä–∏–º–∏–Ω–≥–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã
‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏
‚Ä¢ –†–∞–∑–ª–∏—á–Ω—ã–µ –º–æ–¥–µ–ª–∏ AI

üí° –ù–∞—á–Ω–∏—Ç–µ —Å –∫–Ω–æ–ø–∫–∏ "–û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç" –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–∞—à–∏ –ª–∏–º–∏—Ç—ã.
        """
    else:
        quota = await billing_service.get_user_quota(session, user_id)
        welcome_text = f"""
üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!

üìä –í–∞—à–∏ –ª–∏–º–∏—Ç—ã:
‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–æ–≤: {quota['remaining']}
‚Ä¢ –¢–∞—Ä–∏—Ñ: {quota['plan_name'] or '–¢—Ä–∏–∞–ª'}
        """
    
    await message.answer(
        welcome_text.strip(),
        reply_markup=get_main_keyboard()
    )


@router.message(Command("help"))
async def cmd_help(message: Message):
    """Handle /help command"""
    help_text = """
ü§ñ AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç - –≤–∞—à —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫

üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/limits - –í–∞—à–∏ –ª–∏–º–∏—Ç—ã
/upgrade - –¢–∞—Ä–∏—Ñ—ã
/new - –ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥
/lang - –°–º–µ–Ω–∞ —è–∑—ã–∫–∞

üí¨ –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
1. –ù–∞–∂–º–∏—Ç–µ "–û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç"
2. –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å
3. –ü–æ–ª—É—á–∏—Ç–µ –æ—Ç–≤–µ—Ç –æ—Ç AI

üíé –¢–∞—Ä–∏—Ñ—ã:
‚Ä¢ –¢—Ä–∏–∞–ª: 30 –∑–∞–ø—Ä–æ—Å–æ–≤ –±–µ—Å–ø–ª–∞—Ç–Ω–æ
‚Ä¢ Start: 300 –∑–∞–ø—Ä–æ—Å–æ–≤/–º–µ—Å
‚Ä¢ Pro: 1500 –∑–∞–ø—Ä–æ—Å–æ–≤/–º–µ—Å
‚Ä¢ Business: –±–µ–∑–ª–∏–º–∏—Ç

‚ùì –ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã? –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
    """
    
    await message.answer(help_text.strip())


@router.message(Command("limits"))
async def cmd_limits(message: Message, session: AsyncSession):
    """Handle /limits command"""
    user_id = message.from_user.id
    quota = await billing_service.get_user_quota(session, user_id)
    
    limits_text = f"""
üìä –í–∞—à–∏ –ª–∏–º–∏—Ç—ã:

üÜì –¢—Ä–∏–∞–ª: {quota['trial_left']} –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å
üíé –¢–∞—Ä–∏—Ñ: {quota['plan_name'] or '–¢—Ä–∏–∞–ª'}

üìà –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ: {quota['used_this_month']}
üéØ –û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–æ–≤: {quota['remaining']}

{f"üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ: {quota['plan_until'].strftime('%d.%m.%Y')}" if quota['plan_until'] else ""}
    """
    
    await message.answer(limits_text.strip())


@router.message(Command("upgrade"))
async def cmd_upgrade(message: Message):
    """Handle /upgrade command"""
    await message.answer(
        "üíé –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:",
        reply_markup=get_plans_keyboard()
    )


@router.message(Command("new"))
async def cmd_new_dialog(message: Message, session: AsyncSession):
    """Handle /new command - start new dialog"""
    user_id = message.from_user.id
    
    # Create new dialog
    dialog = Dialog(user_id=user_id, title="–ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥")
    session.add(dialog)
    await session.commit()
    
    await message.answer(
        "üÜï –ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ —Å–æ–∑–¥–∞–Ω! –ù–∞–∂–º–∏—Ç–µ '–û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç' –¥–ª—è –Ω–∞—á–∞–ª–∞.",
        reply_markup=get_main_keyboard()
    )


@router.message(Command("lang"))
async def cmd_lang(message: Message):
    """Handle /lang command"""
    lang_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru"),
            InlineKeyboardButton(text="üá∫üá∏ English", callback_data="lang_en")
        ],
        [
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
        ]
    ])
    
    await message.answer(
        "üåç –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
        reply_markup=lang_keyboard
    )


@router.callback_query(F.data == "limits")
async def callback_limits(callback: CallbackQuery, session: AsyncSession):
    """Handle limits callback"""
    user_id = callback.from_user.id
    quota = await billing_service.get_user_quota(session, user_id)
    
    limits_text = f"""
üìä –í–∞—à–∏ –ª–∏–º–∏—Ç—ã:

üÜì –¢—Ä–∏–∞–ª: {quota['trial_left']} –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å
üíé –¢–∞—Ä–∏—Ñ: {quota['plan_name'] or '–¢—Ä–∏–∞–ª'}

üìà –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ: {quota['used_this_month']}
üéØ –û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–æ–≤: {quota['remaining']}

{f"üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ: {quota['plan_until'].strftime('%d.%m.%Y')}" if quota['plan_until'] else ""}
    """
    
    await callback.message.edit_text(
        limits_text.strip(),
        reply_markup=get_main_keyboard()
    )


@router.callback_query(F.data == "plans")
async def callback_plans(callback: CallbackQuery):
    """Handle plans callback"""
    await callback.message.edit_text(
        "üíé –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:",
        reply_markup=get_plans_keyboard()
    )


@router.callback_query(F.data == "new_dialog")
async def callback_new_dialog(callback: CallbackQuery, session: AsyncSession):
    """Handle new dialog callback"""
    user_id = callback.from_user.id
    
    # Create new dialog
    dialog = Dialog(user_id=user_id, title="–ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥")
    session.add(dialog)
    await session.commit()
    
    await callback.message.edit_text(
        "üÜï –ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ —Å–æ–∑–¥–∞–Ω! –ù–∞–∂–º–∏—Ç–µ '–û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç' –¥–ª—è –Ω–∞—á–∞–ª–∞.",
        reply_markup=get_main_keyboard()
    )


@router.callback_query(F.data.startswith("plan_") | F.data.startswith("pack_"))
async def callback_plan_selection(callback: CallbackQuery):
    """Handle plan selection"""
    plan_type = callback.data
    
    # Define plan details
    plans = {
        "plan_start": {"name": "Start", "stars": 1000, "rub": 299, "quota": 300},
        "plan_pro": {"name": "Pro", "stars": 2500, "rub": 799, "quota": 1500},
        "plan_business": {"name": "Business", "stars": 5000, "rub": 1999, "quota": -1},
        "pack_100": {"name": "Pack100", "stars": 300, "rub": 99, "quota": 100},
        "pack_500": {"name": "Pack500", "stars": 1200, "rub": 399, "quota": 500}
    }
    
    plan = plans.get(plan_type)
    if not plan:
        await callback.answer("–¢–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    plan_text = f"""
üíé {plan['name']}

üìä –ö–≤–æ—Ç–∞: {plan['quota'] if plan['quota'] > 0 else '–ë–µ–∑–ª–∏–º–∏—Ç'} –∑–∞–ø—Ä–æ—Å–æ–≤
‚≠ê –¶–µ–Ω–∞: {plan['stars']} –∑–≤–µ–∑–¥
üí≥ –¶–µ–Ω–∞: {plan['rub']}‚ÇΩ

–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:
    """
    
    await callback.message.edit_text(
        plan_text.strip(),
        reply_markup=get_payment_keyboard(plan['name'], plan['stars'], plan['rub'])
    )


@router.callback_query(F.data.startswith("pay_stars_"))
async def callback_pay_stars(callback: CallbackQuery):
    """Handle Stars payment"""
    plan_name = callback.data.replace("pay_stars_", "")
    
    # Get plan details
    plans = {
        "Start": {"stars": 1000, "quota": 300},
        "Pro": {"stars": 2500, "quota": 1500},
        "Business": {"stars": 5000, "quota": -1},
        "Pack100": {"stars": 300, "quota": 100},
        "Pack500": {"stars": 1200, "quota": 500}
    }
    
    plan = plans.get(plan_name)
    if not plan:
        await callback.answer("–¢–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # Create Stars payment
    stars_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text=f"‚≠ê –ö—É–ø–∏—Ç—å –∑–∞ {plan['stars']} –∑–≤–µ–∑–¥",
                callback_data=f"confirm_stars_{plan_name}"
            )
        ],
        [
            InlineKeyboardButton(
                text="üîô –ù–∞–∑–∞–¥",
                callback_data="plans"
            )
        ]
    ])
    
    await callback.message.edit_text(
        f"‚≠ê –û–ø–ª–∞—Ç–∞ –∑–≤–µ–∑–¥–∞–º–∏\n\n–¢–∞—Ä–∏—Ñ: {plan_name}\n–¶–µ–Ω–∞: {plan['stars']} –∑–≤–µ–∑–¥\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã:",
        reply_markup=stars_keyboard
    )


@router.callback_query(F.data.startswith("pay_yoomoney_"))
async def callback_pay_yoomoney(callback: CallbackQuery, session: AsyncSession):
    """Handle YooKassa payment"""
    plan_name = callback.data.replace("pay_yoomoney_", "")
    user_id = callback.from_user.id
    
    # Get plan details
    plans = {
        "Start": {"rub": 299, "quota": 300},
        "Pro": {"rub": 799, "quota": 1500},
        "Business": {"rub": 1999, "quota": -1},
        "Pack100": {"rub": 99, "quota": 100},
        "Pack500": {"rub": 399, "quota": 500}
    }
    
    plan = plans.get(plan_name)
    if not plan:
        await callback.answer("–¢–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    try:
        # Create YooKassa payment
        payment = payment_service.create_yoomoney_payment(
            user_id=user_id,
            plan_name=plan_name,
            amount=plan['rub'],
            description=f"–ü–æ–¥–ø–∏—Å–∫–∞ {plan_name} - {plan['quota'] if plan['quota'] > 0 else '–±–µ–∑–ª–∏–º–∏—Ç'} –∑–∞–ø—Ä–æ—Å–æ–≤"
        )
        
        yoomoney_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ",
                    url=payment['confirmation_url']
                )
            ],
            [
                InlineKeyboardButton(
                    text="üîô –ù–∞–∑–∞–¥",
                    callback_data="plans"
                )
            ]
        ])
        
        await callback.message.edit_text(
            f"üí≥ –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –ÆMoney\n\n–¢–∞—Ä–∏—Ñ: {plan_name}\n–¶–µ–Ω–∞: {plan['rub']}‚ÇΩ\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ:",
            reply_markup=yoomoney_keyboard
        )
        
    except Exception as e:
        logger.error("Failed to create YooKassa payment", error=str(e))
        await callback.answer("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞")


@router.callback_query(F.data == "back_to_main")
async def callback_back_to_main(callback: CallbackQuery):
    """Handle back to main menu"""
    await callback.message.edit_text(
        "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_keyboard()
    )


@router.pre_checkout_query()
async def process_pre_checkout(pre_checkout: PreCheckoutQuery):
    """Handle pre-checkout query for Stars payments"""
    await pre_checkout.answer(ok=True)


@router.message(F.successful_payment)
async def process_successful_payment(message: Message, session: AsyncSession):
    """Handle successful Stars payment"""
    payment = message.successful_payment
    user_id = message.from_user.id
    
    # Extract plan name from invoice payload
    plan_name = payment.invoice_payload
    
    # Get amount in stars
    amount_stars = payment.total_amount / 100  # Convert from kopecks
    
    # Process payment
    success = await payment_service.process_stars_payment(
        session=session,
        user_id=user_id,
        plan_name=plan_name,
        telegram_charge_id=payment.telegram_payment_charge_id,
        amount=int(amount_stars)
    )
    
    if success:
        await message.answer(
            f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n\n–¢–∞—Ä–∏—Ñ {plan_name} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞.",
            reply_markup=get_main_keyboard()
        )
    else:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=get_main_keyboard()
        )


# Admin commands
@router.message(Command("admin"))
async def cmd_admin(message: Message):
    """Handle /admin command"""
    user_id = message.from_user.id
    
    if user_id not in settings.admin_ids:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return
    
    admin_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="üìä –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å",
                web_app=WebAppInfo(url=f"{settings.app_base_url}/admin")
            )
        ],
        [
            InlineKeyboardButton(
                text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                callback_data="admin_stats"
            ),
            InlineKeyboardButton(
                text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
                callback_data="admin_users"
            )
        ]
    ])
    
    await message.answer(
        "üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=admin_keyboard
    )


@router.message(Command("give"))
async def cmd_give(message: Message, session: AsyncSession):
    """Handle /give command - give requests/plan to user"""
    user_id = message.from_user.id
    
    if user_id not in settings.admin_ids:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    # Parse command: /give <user_id> <amount|plan>
    args = message.text.split()
    if len(args) != 3:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /give <user_id> <amount|plan>")
        return
    
    try:
        target_user_id = int(args[1])
        amount_or_plan = args[2]
        
        # Check if it's a number (trial requests) or plan name
        if amount_or_plan.isdigit():
            amount = int(amount_or_plan)
            success = await billing_service.add_trial_requests(session, target_user_id, amount)
            if success:
                await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id} –¥–æ–±–∞–≤–ª–µ–Ω–æ {amount} –∑–∞–ø—Ä–æ—Å–æ–≤.")
            else:
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}.")
        else:
            # It's a plan name
            # TODO: Implement plan activation
            await message.answer(f"üìã –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–ª–∞–Ω–∞ {amount_or_plan} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} (–Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ).")
            
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç user_id.")


@router.message(Command("stats"))
async def cmd_stats(message: Message, session: AsyncSession):
    """Handle /stats command - show statistics"""
    user_id = message.from_user.id
    
    if user_id not in settings.admin_ids:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    # TODO: Implement statistics
    await message.answer("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ)")
